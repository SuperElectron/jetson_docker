<SIGNAL>
<NAME>GstSwitch::block</NAME>
<RETURNS>gint64</RETURNS>
<FLAGS>l</FLAGS>
GstSwitch *gstswitch
</SIGNAL>

<SIGNAL>
<NAME>GstSwitch::switch</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstSwitch *gstswitch
gchar *arg1
gint64  arg2
gint64  arg3
</SIGNAL>

<SIGNAL>
<NAME>GstInputSelector::block</NAME>
<RETURNS>gint64</RETURNS>
<FLAGS>la</FLAGS>
GstInputSelector *gstinputselector
</SIGNAL>

<SIGNAL>
<NAME>GstInputSelector::switch</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstInputSelector *gstinputselector
GstPad *arg1
gint64  arg2
gint64  arg3
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::img-done</NAME>
<RETURNS>gboolean</RETURNS>
<FLAGS>l</FLAGS>
GstCameraBin *gstcamerabin
gchar *arg1
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::user-image-res</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin *gstcamerabin
gint  arg1
gint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::user-pause</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin *gstcamerabin
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::user-res-fps</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin *gstcamerabin
gint  arg1
gint  arg2
gint  arg3
gint  arg4
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::user-start</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin *gstcamerabin
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::user-stop</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin *gstcamerabin
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::capture-pause</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin *gstcamerabin
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::capture-start</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin *gstcamerabin
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::capture-stop</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin *gstcamerabin
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::image-done</NAME>
<RETURNS>gboolean</RETURNS>
<FLAGS>l</FLAGS>
GstCameraBin *gstcamerabin
gchar *arg1
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::set-image-resolution</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin *gstcamerabin
gint  arg1
gint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::set-video-resolution-fps</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin *gstcamerabin
gint  arg1
gint  arg2
gint  arg3
gint  arg4
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::start-capture</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin *gstcamerabin
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin::stop-capture</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin *gstcamerabin
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::clear-pt-map</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstRtpBin *gstrtpbin
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::get-internal-session</NAME>
<RETURNS>RTPSession*</RETURNS>
<FLAGS>la</FLAGS>
GstRtpBin *gstrtpbin
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::on-bye-ssrc</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpBin *gstrtpbin
guint  arg1
guint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::on-bye-timeout</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpBin *gstrtpbin
guint  arg1
guint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::on-new-ssrc</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpBin *gstrtpbin
guint  arg1
guint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::on-npt-stop</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpBin *gstrtpbin
guint  arg1
guint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::on-sender-timeout</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpBin *gstrtpbin
guint  arg1
guint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::on-ssrc-active</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpBin *gstrtpbin
guint  arg1
guint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::on-ssrc-collision</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpBin *gstrtpbin
guint  arg1
guint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::on-ssrc-sdes</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpBin *gstrtpbin
guint  arg1
guint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::on-ssrc-validated</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpBin *gstrtpbin
guint  arg1
guint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::on-timeout</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpBin *gstrtpbin
guint  arg1
guint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::request-pt-map</NAME>
<RETURNS>GstCaps*</RETURNS>
<FLAGS>l</FLAGS>
GstRtpBin *gstrtpbin
guint  arg1
guint  arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpBin::reset-sync</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstRtpBin *gstrtpbin
</SIGNAL>

<SIGNAL>
<NAME>GstRtpJitterBuffer::clear-pt-map</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstRtpJitterBuffer *gstrtpjitterbuffer
</SIGNAL>

<SIGNAL>
<NAME>GstRtpJitterBuffer::handle-sync</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpJitterBuffer *gstrtpjitterbuffer
GstStructure *arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpJitterBuffer::on-npt-stop</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpJitterBuffer *gstrtpjitterbuffer
</SIGNAL>

<SIGNAL>
<NAME>GstRtpJitterBuffer::request-pt-map</NAME>
<RETURNS>GstCaps*</RETURNS>
<FLAGS>l</FLAGS>
GstRtpJitterBuffer *gstrtpjitterbuffer
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpPtDemux::clear-pt-map</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstRtpPtDemux *gstrtpptdemux
</SIGNAL>

<SIGNAL>
<NAME>GstRtpPtDemux::new-payload-type</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpPtDemux *gstrtpptdemux
guint  arg1
GstPad *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpPtDemux::payload-type-change</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpPtDemux *gstrtpptdemux
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpPtDemux::request-pt-map</NAME>
<RETURNS>GstCaps*</RETURNS>
<FLAGS>l</FLAGS>
GstRtpPtDemux *gstrtpptdemux
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSession::clear-pt-map</NAME>
<RETURNS>void</RETURNS>
<FLAGS>a</FLAGS>
GstRtpSession *gstrtpsession
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSession::on-bye-ssrc</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpSession *gstrtpsession
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSession::on-bye-timeout</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpSession *gstrtpsession
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSession::on-new-ssrc</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpSession *gstrtpsession
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSession::on-sender-timeout</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpSession *gstrtpsession
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSession::on-ssrc-active</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpSession *gstrtpsession
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSession::on-ssrc-collision</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpSession *gstrtpsession
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSession::on-ssrc-sdes</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpSession *gstrtpsession
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSession::on-ssrc-validated</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpSession *gstrtpsession
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSession::on-timeout</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpSession *gstrtpsession
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSession::request-pt-map</NAME>
<RETURNS>GstCaps*</RETURNS>
<FLAGS>l</FLAGS>
GstRtpSession *gstrtpsession
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSsrcDemux::clear-ssrc</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstRtpSsrcDemux *gstrtpssrcdemux
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSsrcDemux::new-ssrc-pad</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpSsrcDemux *gstrtpssrcdemux
guint  arg1
GstPad *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstRtpSsrcDemux::removed-ssrc-pad</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstRtpSsrcDemux *gstrtpssrcdemux
guint  arg1
GstPad *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstFPSDisplaySink::fps-measurements</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstFPSDisplaySink *gstfpsdisplaysink
gdouble  arg1
gdouble  arg2
gdouble  arg3
</SIGNAL>

<SIGNAL>
<NAME>GstShmSink::client-connected</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstShmSink *gstshmsink
gint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstShmSink::client-disconnected</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstShmSink *gstshmsink
gint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin2::start-capture</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin2 *gstcamerabin2
</SIGNAL>

<SIGNAL>
<NAME>GstCameraBin2::stop-capture</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstCameraBin2 *gstcamerabin2
</SIGNAL>

<SIGNAL>
<NAME>GstUvcH264Src::get-boolean-setting</NAME>
<RETURNS>gboolean</RETURNS>
<FLAGS>la</FLAGS>
GstUvcH264Src *gstuvch264src
gchar *arg1
gpointer  arg2
gpointer  arg3
</SIGNAL>

<SIGNAL>
<NAME>GstUvcH264Src::get-enum-setting</NAME>
<RETURNS>gboolean</RETURNS>
<FLAGS>la</FLAGS>
GstUvcH264Src *gstuvch264src
gchar *arg1
gpointer  arg2
gpointer  arg3
</SIGNAL>

<SIGNAL>
<NAME>GstUvcH264Src::get-int-setting</NAME>
<RETURNS>gboolean</RETURNS>
<FLAGS>la</FLAGS>
GstUvcH264Src *gstuvch264src
gchar *arg1
gpointer  arg2
gpointer  arg3
gpointer  arg4
</SIGNAL>

<SIGNAL>
<NAME>GstSrtpEnc::soft-limit</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstSrtpEnc *gstsrtpenc
</SIGNAL>

<SIGNAL>
<NAME>GstSrtpEnc::get-rollover-counter</NAME>
<RETURNS>guint</RETURNS>
<FLAGS>la</FLAGS>
GstSrtpEnc *gstsrtpenc
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstSrtpDec::clear-keys</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstSrtpDec *gstsrtpdec
</SIGNAL>

<SIGNAL>
<NAME>GstSrtpDec::hard-limit</NAME>
<RETURNS>GstCaps*</RETURNS>
<FLAGS>l</FLAGS>
GstSrtpDec *gstsrtpdec
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstSrtpDec::request-key</NAME>
<RETURNS>GstCaps*</RETURNS>
<FLAGS>l</FLAGS>
GstSrtpDec *gstsrtpdec
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstSrtpDec::soft-limit</NAME>
<RETURNS>GstCaps*</RETURNS>
<FLAGS>l</FLAGS>
GstSrtpDec *gstsrtpdec
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstSrtpDec::remove-key</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstSrtpDec *gstsrtpdec
guint  arg1
</SIGNAL>

<SIGNAL>
<NAME>GstDvbSrc::tuning-done</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstDvbSrc *gstdvbsrc
</SIGNAL>

<SIGNAL>
<NAME>GstDvbSrc::tuning-fail</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstDvbSrc *gstdvbsrc
</SIGNAL>

<SIGNAL>
<NAME>GstDvbSrc::tuning-start</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstDvbSrc *gstdvbsrc
</SIGNAL>

<SIGNAL>
<NAME>GstDvbSrc::tune</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstDvbSrc *gstdvbsrc
</SIGNAL>

<SIGNAL>
<NAME>DvbBaseBin::tuning-done</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
DvbBaseBin *dvbbasebin
</SIGNAL>

<SIGNAL>
<NAME>DvbBaseBin::tuning-fail</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
DvbBaseBin *dvbbasebin
</SIGNAL>

<SIGNAL>
<NAME>DvbBaseBin::tuning-start</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
DvbBaseBin *dvbbasebin
</SIGNAL>

<SIGNAL>
<NAME>DvbBaseBin::tune</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
DvbBaseBin *dvbbasebin
</SIGNAL>

<SIGNAL>
<NAME>GstGLImageSink::client-draw</NAME>
<RETURNS>gboolean</RETURNS>
<FLAGS>l</FLAGS>
GstGLImageSink *gstglimagesink
GstGLContext *arg1
GstSample *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstGLImageSink::client-reshape</NAME>
<RETURNS>gboolean</RETURNS>
<FLAGS>l</FLAGS>
GstGLImageSink *gstglimagesink
GstGLContext *arg1
guint  arg2
guint  arg3
</SIGNAL>

<SIGNAL>
<NAME>GstGLFilterApp::client-draw</NAME>
<RETURNS>gboolean</RETURNS>
<FLAGS>l</FLAGS>
GstGLFilterApp *gstglfilterapp
guint  arg1
guint  arg2
guint  arg3
</SIGNAL>

<SIGNAL>
<NAME>GstGLSrcBin::create-element</NAME>
<RETURNS>GstElement*</RETURNS>
<FLAGS>l</FLAGS>
GstGLSrcBin *gstglsrcbin
</SIGNAL>

<SIGNAL>
<NAME>GstGLSinkBin::create-element</NAME>
<RETURNS>GstElement*</RETURNS>
<FLAGS>l</FLAGS>
GstGLSinkBin *gstglsinkbin
</SIGNAL>

<SIGNAL>
<NAME>GstGLMixerBin::create-element</NAME>
<RETURNS>GstElement*</RETURNS>
<FLAGS>l</FLAGS>
GstGLMixerBin *gstglmixerbin
</SIGNAL>

<SIGNAL>
<NAME>GstGLImageSinkBin::client-draw</NAME>
<RETURNS>gboolean</RETURNS>
<FLAGS>l</FLAGS>
GstGLImageSinkBin *gstglimagesinkbin
GstGLContext *arg1
GstSample *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstGLImageSinkBin::client-reshape</NAME>
<RETURNS>gboolean</RETURNS>
<FLAGS>l</FLAGS>
GstGLImageSinkBin *gstglimagesinkbin
GstGLContext *arg1
guint  arg2
guint  arg3
</SIGNAL>

<SIGNAL>
<NAME>GstGLFilterBin::create-element</NAME>
<RETURNS>GstElement*</RETURNS>
<FLAGS>l</FLAGS>
GstGLFilterBin *gstglfilterbin
</SIGNAL>

<SIGNAL>
<NAME>GstDtlsSrtpEnc::on-key-set</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstDtlsSrtpEnc *gstdtlssrtpenc
</SIGNAL>

<SIGNAL>
<NAME>GstDtlsEnc::on-key-received</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstDtlsEnc *gstdtlsenc
</SIGNAL>

<SIGNAL>
<NAME>GstDtlsDec::on-key-received</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstDtlsDec *gstdtlsdec
</SIGNAL>

<SIGNAL>
<NAME>GstGLFilterShader::create-shader</NAME>
<RETURNS>GstGLShader*</RETURNS>
<FLAGS>l</FLAGS>
GstGLFilterShader *gstglfiltershader
</SIGNAL>

<SIGNAL>
<NAME>GstIpcPipelineSrc::disconnect</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstIpcPipelineSrc *gstipcpipelinesrc
</SIGNAL>

<SIGNAL>
<NAME>GstIpcPipelineSrc::forward-message</NAME>
<RETURNS>gboolean</RETURNS>
<FLAGS>la</FLAGS>
GstIpcPipelineSrc *gstipcpipelinesrc
GstMessage *arg1
</SIGNAL>

<SIGNAL>
<NAME>GstIpcPipelineSink::disconnect</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstIpcPipelineSink *gstipcpipelinesink
</SIGNAL>

<SIGNAL>
<NAME>GstWebRTCBin::add-ice-candidate</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstWebRTCBin *gstwebrtcbin
guint  arg1
gchar *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstWebRTCBin::add-transceiver</NAME>
<RETURNS>GstWebRTCRTPTransceiver*</RETURNS>
<FLAGS>la</FLAGS>
GstWebRTCBin *gstwebrtcbin
GstWebRTCRTPTransceiverDirection  arg1
GstCaps *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstWebRTCBin::create-answer</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstWebRTCBin *gstwebrtcbin
GstStructure *arg1
GstPromise *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstWebRTCBin::create-offer</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstWebRTCBin *gstwebrtcbin
GstStructure *arg1
GstPromise *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstWebRTCBin::get-stats</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstWebRTCBin *gstwebrtcbin
GstPad *arg1
GstPromise *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstWebRTCBin::get-transceivers</NAME>
<RETURNS>GArray*</RETURNS>
<FLAGS>la</FLAGS>
GstWebRTCBin *gstwebrtcbin
</SIGNAL>

<SIGNAL>
<NAME>GstWebRTCBin::on-ice-candidate</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstWebRTCBin *gstwebrtcbin
guint  arg1
gchar *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstWebRTCBin::on-negotiation-needed</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstWebRTCBin *gstwebrtcbin
</SIGNAL>

<SIGNAL>
<NAME>GstWebRTCBin::set-local-description</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstWebRTCBin *gstwebrtcbin
GstWebRTCSessionDescription *arg1
GstPromise *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstWebRTCBin::set-remote-description</NAME>
<RETURNS>void</RETURNS>
<FLAGS>la</FLAGS>
GstWebRTCBin *gstwebrtcbin
GstWebRTCSessionDescription *arg1
GstPromise *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstWebRTCBin::on-new-transceiver</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstWebRTCBin *gstwebrtcbin
GstWebRTCRTPTransceiver *arg1
</SIGNAL>

<SIGNAL>
<NAME>GstSRTServerSrc::client-added</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstSRTServerSrc *gstsrtserversrc
gint  arg1
GSocketAddress *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstSRTServerSrc::client-closed</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstSRTServerSrc *gstsrtserversrc
gint  arg1
GSocketAddress *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstSRTServerSink::client-added</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstSRTServerSink *gstsrtserversink
gint  arg1
GSocketAddress *arg2
</SIGNAL>

<SIGNAL>
<NAME>GstSRTServerSink::client-removed</NAME>
<RETURNS>void</RETURNS>
<FLAGS>l</FLAGS>
GstSRTServerSink *gstsrtserversink
gint  arg1
GSocketAddress *arg2
</SIGNAL>

